@page "/EditRoom/{Id}"
@attribute [Authorize(Roles = "infra")]

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using OJTTraining.Data
@using OJTTraining.Service
@inject RoomService roomService
@inject NavigationManager NavigationManager

<h2>Update Room</h2>
<hr />

<EditForm Model="obj" OnValidSubmit="UpdateRoom">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="RoomNumber">Room Number<span style="color : red;">*</span>:</label>
        <InputText id="RoomNumber" @bind-Value="obj.RoomNumber" class="form-control" />
    </div>
    <div class="form-group">
        <label for="RoomCapacity">Room Capacity<span style="color : red;">*</span>:</label>
        <InputNumber id="RoomCapacity" @bind-Value="obj.RoomCapacity" class="form-control" />
    </div>

    <button class="btn btn-primary" type="submit">Update</button>
    <button class="btn btn-secondary" @onclick="Cancel" type="button">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }
    Room obj = new Room();

    protected override async Task OnInitializedAsync()
    {
        obj = await Task.Run(() => roomService.GetRoomAsync(Id));
    }

    protected async void UpdateRoom()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        obj.UpdateDateTime = DateTime.Now;
        obj.UpdatePIC = user.Identity.Name;

        await roomService.UpdateRoomAsync(obj);
        NavigationManager.NavigateTo("Rooms");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("Rooms", true);
    }
}