@page "/Rooms/DeleteRoom/{Id}"
@attribute [Authorize(Roles = "infra")]

@inject IStringLocalizer<App> Localization

@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using OJTTraining.Data
@using OJTTraining.Service
@inject RoomService roomService
@inject NavigationManager NavigationManager

<h2>@Localization["Delete Room"]</h2>
<hr />

<div>
    @if (editContext is not null)
    {
        <EditForm EditContext="@editContext">
            <ValidationSummary></ValidationSummary>
        </EditForm>
    }

    <div class="form-group">
        <label for="RoomNumber" class="font-weight-bold">@Localization["Room Number:"]</label>
        <label id="RoomNumber">@obj.RoomNumber</label>
    </div>
    <div class="form-group">
        <label for="RoomCapacity" class="font-weight-bold">@Localization["Room Capacity:"]</label>
        <label id="RoomCapacity">@obj.RoomCapacity</label>
    </div>
    <div class="form-group">
        <label for="RoomCapacity" class="font-weight-bold">@Localization["No of Patients:"]</label>
        <label id="RoomCapacity">
            <a class="nav-link" href="@queryString">
                <b>@noOfPatients</b>
            </a>
        </label>
    </div>

    <button class="btn btn-danger" @onclick="Delete">@Localization["Delete"]</button>
    <button class="btn btn-secondary" @onclick="Cancel">@Localization["Cancel"]</button>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string Id { get; set; }

    private Room obj = new Room();

    private int noOfPatients;
    private string queryString;

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    protected override async Task OnInitializedAsync()
    {
        obj = await Task.Run(() => roomService.GetRoomAsync(Id));

        if (obj == null)
        {
            NavigationManager.NavigateTo("404");
            return;
        }

        editContext = new(obj);
        messageStore = new(editContext);

        noOfPatients = await roomService.GetNoUsedAsync(obj);
        queryString = $"Patients?roomNumber={obj.RoomNumber}&checkinBy={DateTime.Now.ToString("d", CultureInfo.CurrentCulture)}&checkoutBefore={DateTime.Now.ToString("d", CultureInfo.CurrentCulture)}";
    }

    protected async Task Delete()
    {
        messageStore.Clear();

        var isUsed = await roomService.CheckIfUsedAsync(obj);

        if (isUsed)
        {
            messageStore.Add(() => obj.RoomNumber, "Room is currently being used");
        }

        editContext.NotifyValidationStateChanged();

        if (!isUsed)
        {
            var options = new ModalOptions()
            {
                Animation = ModalAnimation.FadeInOut(0.1)
            };

            var deleteDialog = Modal.Show<DeleteConfirmation>("Delete", options);
            var result = await deleteDialog.Result;

            if (!result.Cancelled)
            {
                await DeleteCallback();
            }
        }
    }

    protected async Task DeleteCallback()
    {
        await roomService.DeleteRoomAsync(obj);
        NavigationManager.NavigateTo("Rooms");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("Rooms");
    }
}
