@page "/Rooms"
@attribute [Authorize(Roles = "infra")]

@inject IStringLocalizer<App> Localization

@using System.Globalization;

@using OJTTraining.Data
@using OJTTraining.Service
@inject RoomService roomService
@inject IJSRuntime js

<h1>@Localization["Room Info"] @(count != 0 ? "(" + count.ToString(CultureInfo.CurrentCulture) + ")" : "")</h1>

<div class="card">
    <div class="card-header nav-link" id="headingOne" @onclick="e => this.showSearch = !this.showSearch" role="button" style="cursor: pointer;">
        <h5 class="mb-0">
            @Localization["Search Room"]
        </h5>
    </div>
    <div id="collapseOne" class="collapse @(showSearch ? "show" : "")" aria-labelledby="headingOne">
        <div class="card-body">
            <EditForm Model="roomScreen" OnSubmit="@SearchRoom">
                <div class="form-group">
                    <label for="RoomNumber">@Localization["Room Number:"]</label>
                    <input id="RoomNumber" @bind="roomScreen.RoomNumber" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="RoomStatus">@Localization["Room Status:"]</label>
                    <select class="form-control selectpicker" @bind="roomScreen.Status">
                        <option value="">@Localization["--select--"]</option>
                        <option value="Available">@Localization["Available"]</option>
                        <option value="Full">@Localization["Full"]</option>
                        <option value="Overcrowded">@Localization["Overcrowded"]</option>
                        <option value="Closed">@Localization["Closed"]</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> @Localization["Search"]
                </button>
            </EditForm>
        </div>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="row mx-0 my-1">
            <div></div>
            <div class="ml-auto mr-1"><DownloadDropdown CsvData="GetCsvData" ExcelData="GetExcelData" FileName="rooms"></DownloadDropdown></div>
            <div>
                <AuthorizeView Roles="admin">
                    <div class="">
                        <a class="btn btn-primary" href="Rooms/AddRoom">
                            <span class="oi oi-plus" aria-hidden="true"></span> @Localization["Add Room"]
                        </a>
                    </div>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div class="panel-body">
        <table class="table my-2">
            <thead>
                <tr>
                    <th class="mx-auto">@Localization["Room Number"]</th>
                    <th class="mx-auto">@Localization["Room Status"]</th>
                    <AuthorizeView Roles="admin">
                        <th>@Localization["Action"]</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @if (room is null)
                {
                    <tr>
                        <td colspan="3" align="center">
                            <div class="spinner-border text-info" role="status">
                                <span class="sr-only">@Localization["Loading..."]</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (count == 0)
                {
                    <tr>
                        <td colspan="3" align="center">
                            <p><em>@Localization["No Data"]</em></p>
                        </td>
                    </tr>
                }
                else
                {
                    <Virtualize Items="@room" Context="item">
                        <tr>
                            <td class="mx-auto">
                                <a class="nav-link" href="Rooms/ViewRoom/@item.RoomNumber">
                                    <b>@item.RoomNumber</b>
                                </a>
                            </td>

                            <td class="mx-auto" style="color : @GetColor(item.RoomStatus);"><b>@Localization[@item.RoomStatus]</b></td>
                            <AuthorizeView Roles="admin">
                                <td>
                                    <span>
                                        <a class="btn btn-info my-1" href="Rooms/EditRoom/@item.RoomNumber">
                                            <span class="oi oi-pencil" aria-hidden="true"></span> @Localization["Edit"]
                                        </a>
                                        <a class="btn btn-danger my-1" href="Rooms/DeleteRoom/@item.RoomNumber">
                                            <span class="oi oi-trash" aria-hidden="true"></span> @Localization["Delete"]
                                        </a>
                                    </span>
                                </td>
                            </AuthorizeView>
                        </tr>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
    <div class="panel-footer">
        <Pagination Skip="skip" Top="top" ViewCount="@(room is null ? 0 : room.Count)" TotalCount="count" GetPage="GetPage" Change="Change"></Pagination>
    </div>
</div>

@code {
    private RoomSearch roomScreen = new RoomSearch();
    private RoomSearch roomSearch = new RoomSearch();
    private List<RoomView> room;

    private int skip = 0;
    private int top = 10;
    private int count = 0;

    private bool showSearch = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await roomService.GetRoomsAsync(0, top, roomSearch);
        count = response.Count;
        room = response.Rooms;
    }

    async Task GetPage(int page)
    {
        skip = (page - 1) * top;

        var response = await roomService.GetRoomsAsync(skip, top, roomSearch);
        count = response.Count;
        room = response.Rooms;
    }

    async Task Change(ChangeEventArgs e)
    {
        top = int.Parse(e.Value.ToString());
        await GetPage(1);
    }

    async Task SearchRoom()
    {
        skip = 0;
        count = 0;
        room = null;

        roomSearch.Clone(roomScreen);

        var response = await roomService.GetRoomsAsync(skip, top, roomSearch);
        count = response.Count;
        room = response.Rooms;
    }

    private async Task<byte[]> GetCsvData()
    {
        var response = await roomService.GetRoomsAsync(0, 0, roomSearch);
        return DownloadService.GenerateCSV<RoomView>(response.Rooms);
    }

    private async Task<byte[]> GetExcelData()
    {
        var response = await roomService.GetRoomsAsync(0, 0, roomSearch);
        return DownloadService.GenerateExcel<RoomView>(response.Rooms);
    }

    private string GetColor(string status)
    {
        switch (status)
        {
            case "Available":
                return "Green";
            case "Closed":
                return "Red";
            case "Overcrowded":
                return "Orange";
            case "Full":
                return "Blue";
        }
        return "";
    }
}
