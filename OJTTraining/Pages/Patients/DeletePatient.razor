@page "/DeletePatient/{Id}"
@attribute [Authorize(Roles = "admin")]

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using OJTTraining.Data
@using OJTTraining.Service
@inject PatientService patientService
@inject NavigationManager NavigationManager

<h2>Delete Patient</h2>
<hr />
<div>
    <div class="form-group">
        <label for="PatientName" class="font-weight-bold">Patient Name:</label>
        <label id="PatientName">@obj.PatientName</label>
    </div>
    <div class="form-group">
        <label for="RoomNumber" class="font-weight-bold">Room Number:</label>
        <label id="RoomNumber">@obj.RoomNumber</label>
    </div>
    <div class="form-group">
        <label for="CheckinDate" class="font-weight-bold">Checkin Date:</label>
        <label id="CheckinDate">@obj.CheckinDate</label>
    </div>
    <div class="form-group">
        <label for="CheckoutDate" class="font-weight-bold">Checkout Date:</label>
        <label id="CheckoutDate">@obj.CheckoutDate</label>
    </div>

    <button class="btn btn-danger" @onclick="Delete">Delete</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string Id { get; set; }

    private Patient obj = new Patient();

    protected override async Task OnInitializedAsync()
    {
        obj = await Task.Run(() => patientService.GetPatientAsync(Guid.Parse(Id)));
    }

    protected async Task Delete()
    {
        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(0.1)
        };

        var deleteDialog = Modal.Show<DeleteConfirmation>("Delete", options);
        var result = await deleteDialog.Result;

        if (!result.Cancelled) {
            await DeleteCallback();
        }
    }

    protected async Task DeleteCallback()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        obj.UpdateDateTime = new DateTime();
        obj.UpdatePIC = user.Identity.Name;
        obj.IsDeleted = true;

        await patientService.UpdatePatientAsync(obj);
        NavigationManager.NavigateTo("Patients");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("Patients");
    }
}
