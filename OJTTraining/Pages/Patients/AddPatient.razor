@page "/Patients/AddPatient"
@attribute [Authorize(Roles = "admin")]

@inject IStringLocalizer<App> Localization

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using OJTTraining.Data
@using OJTTraining.Service
@inject PatientService patientService
@inject RoomService roomService
@inject NavigationManager NavigationManager

<h2>@Localization["Add Patient"]</h2>
<hr />

<EditForm EditContext="@editContext" OnValidSubmit="@CreatePatient">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="PatientName">@Localization["Patient Name"]<span style="color : red;">@Localization["*"]</span>@Localization[":"]</label>
        <InputText id="PatientName" @bind-Value="obj.PatientName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="RoomNumber">@Localization["Room Number"]<span style="color : red;">@Localization["*"]</span>@Localization[":"]</label>
        <RoomDropdown id="RoomNumber" @bind-Value="obj.RoomNumber"></RoomDropdown>
    </div>
    <div class="form-group">
        <label for="CheckinDate">@Localization["Checkin Date"]<span style="color : red;">@Localization["*"]</span>@Localization[":"]</label>
        <div id="CheckinDate" class="form-row">
            <div class="col-md-8">
                <input type="date" @bind="obj.CheckinDate" class="form-control @checkinDateClass" />
            </div>
            <div class="col-md-4">
                <input type="time" @bind="obj.CheckinDate" class="form-control @checkinDateClass" />
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="CheckoutDate">@Localization["Checkout Date:"]</label>
        <div id="CheckoutDate" class="form-row">
            <div class="col-md-8">
                <input type="date" @bind="obj.CheckoutDate" class="form-control @checkoutDateClass" />
            </div>
            <div class="col-md-4">
                <input type="time" @bind="obj.CheckoutDate" class="form-control @checkoutDateClass" />
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">@Localization["Submit"]</button>
    <button class="btn btn-secondary" @onclick="Cancel" type="button">@Localization["Cancel"]</button>
</EditForm>

@code {
    Patient obj = new Patient();

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private string checkinDateClass = "";
    private string checkoutDateClass = "";

    protected override void OnInitialized()
    {
        obj.CheckinDate = DateTime.Now;

        editContext = new(obj);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        messageStore.Clear();

        if (obj.CheckoutDate != null && obj.CheckoutDate < obj.CheckinDate)
        {
            messageStore.Add(() => obj.CheckoutDate, "Checkout Date should be later than Checkin Date");
        }

        FieldIdentifier fieldIdentifier = editContext.Field("CheckoutDate");
        bool isCheckoutDateValid = !editContext.GetValidationMessages(fieldIdentifier).Any();

        if (isCheckoutDateValid)
        {
            checkoutDateClass = "modified valid";
        }
        else
        {
            checkoutDateClass = "invalid";
        }

        FieldIdentifier checkinDate = editContext.Field("CheckinDate");
        bool isCheckinDateValid = !editContext.GetValidationMessages(checkinDate).Any();

        if (isCheckinDateValid)
        {
            checkinDateClass = "modified valid";
        }
        else
        {
            checkinDateClass = "invalid";
        }

        editContext.NotifyValidationStateChanged();
    }

    protected async void CreatePatient()
    {
        if (obj.RoomNumber != null && !obj.RoomNumber.Equals(""))
        {
            var roomNumber = await roomService.CheckIfAvailableAsync(obj.RoomNumber);

            if (roomNumber.Equals(""))
            {
                messageStore.Add(() => obj.RoomNumber, "Room is not available");
            }
            else
            {
                obj.RoomNumber = roomNumber;
            }
        }

        editContext.NotifyValidationStateChanged();

        var isValid = !editContext.GetValidationMessages().Any();

        if (isValid)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            obj.RegisterDateTime = DateTime.Now;
            obj.RegisterPIC = user.Identity.Name;
            obj.IsDeleted = false;

            await patientService.InsertPatientAsync(obj);
            NavigationManager.NavigateTo("Patients");
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("Patients");
    }

    public void Dispose()
    {
        editContext.OnValidationRequested -= HandleValidationRequested;
    }
}